<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Common Technical Practices on RSE Handbook</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/</link><description>Recent content in Common Technical Practices on RSE Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://sa2c.github.io/RSE-handbook/docs/technical_practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Changelogs and Semantic Versioning</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/change_logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/change_logs/</guid><description>Changelogs # For any non-trivial code, it is worth maintaining a Changelog. This is valuable as it is a record of changes from the perspective of users (rather than git commit messages which are often only meaningful to the developers involved). A recommended format for Changelog files is given at Keep a changelog. All notable changes to a project should be documented in this file.
Semantic Versioning # A related concept is semantic versioning.</description></item><item><title>Configuring Your Editor</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/configuring_editors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/configuring_editors/</guid><description>Configuring Your Editor # There is such a thing as EditorConfig that we could start to adapt. We currently don&amp;rsquo;t use it.</description></item><item><title>C++ Tools and Practices</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/cpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/cpp/</guid><description> C++ Tools and Practices # If none of the excluding reasons from the general Tools and Best Practices applies, do the following:
Autoformat your code with clang-format Lint your code with clang-tidy Try to digest and apply C++ Core Guidelines to the best of your abilities In case you start from scratch, use ModernCppStarter. Otherwise, use it as a guideline as to how your code could look like.</description></item><item><title>Python Tools and Practices</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/python/</guid><description>Python Tools and Practices # If none of the excluding reasons from the general Tools and Best Practices applies, do the following:
Autoformat your code with black Sort your inputs with isort Use type hints and mypy as a static type checker Lint your code with flake8 and pylint (they have some overlap but they are not identical) Use pytest for automated testing We might at some point provide more details on how to do that here.</description></item></channel></rss>