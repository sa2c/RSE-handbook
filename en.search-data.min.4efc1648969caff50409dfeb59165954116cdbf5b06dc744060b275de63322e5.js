"use strict";(function(){const t={cache:!0};t.doc={id:"id",field:["title","content"],store:["title","href","section"]};const e=FlexSearch.create("balance",t);window.bookSearchIndex=e,e.add({id:0,href:"/RSE-handbook/docs/contributing/discussions_and_issues/",title:"Discussions and Issues",section:"Contributing",content:" Discussions and Issues # Discussions # Issues # "}),e.add({id:1,href:"/RSE-handbook/docs/projects/azure_devops/",title:"Azure DevOps",section:"Projects",content:` Azure DevOps # Current Process # We use the boards/work items functionality of Azure DevOps to track tasks and progress on projects. These are structured in a relatively prescriptive way
Each project is created as a “team” and “area path” in Azure DevOps language.
Overarching areas of work within projects are created as Epics. Many/most projects have a single Epic.
Goals within an area are created as Features. Features must be parented to Epics. (DevOps does not enforce this, but floating work items get lost.)
Specific pieces of work to do towards a particular goal are created as Development Tasks or Admin Tasks. Meetings that will enable progress towards a goal are created as Meetings. These must all be parented to a Feature.
Because Azure DevOps was designed for teams working on a single product, the web-based views work very poorly for our team meetings where we review progress on multiple projects. Instead, we use a client written in Emacs Lisp that pulls down all work items in projects of interest and displays them in a tree view.
This is available from https://github.com/edbennett/azdev-mode/
The team ordering list is defined in azdev_config.el in Record.
Work items can be created (M-x azdev/add-item), be deleted (M-x azdev/remove-item), have their title changed (M-x azdev/set-work-item-title), and have their status updated (Tab) from the client. Certain work item statuses are not available currently (e.g. “Parked”); these must be set on the web instead.
Only work items with parents can be created in the client; new Epics must be created on the web.
If you need help setting up the Emacs client, then talk to someone who already has it working
Currently support items and other smaller pieces of work not attached to projects are not tracked in DevOps.
Work items can be assigned to specific team members; this is not currently done consistently however.
Some aspects of the setup are no longer relevant:
Previously we recorded time spent on each work-item; we do not currently do this.
Previously meetings had associated “meeting attendances” associated with specific people; we do not currently record these.
Proposed Changes # If any has capacity they can write a Vim client `}),e.add({id:2,href:"/RSE-handbook/docs/how_we_work/code_review/",title:"Code Review",section:"How We Work",content:` Code Review # Code reviews are used by most sucessful tech companies and generally propagated as a useful tool for several reasons:
Better code quality Learning effects for the coder and the reviewer Increasing the lottery factor There are numerous discussions and opinions of good code reviews out there in every imaginable way of presentation (see \u0026hellip;) but as code reviews are practically non-existent in our group at the time of writing, this document shall only provide some very simple guidelines that can be expanded on when the basics are established.
When and How to Use Code Reviews # Given the smallness and diversity of our projects as well as the current (non-existent) status, we shouldn\u0026rsquo;t try to enforce code reviews on everything. As a first step, we should try to make them common practice for all projects that have at least two people working on it and on request. It is explicitly encouraged to submit such requests to a particular person or the team in general.
We should aim for a tight feedback cycle. That means that the code submitted should have a reasonable size such that the reviewer can understand and review it in roughly an hour or two (shorter is fine if the project as a whole or this aspect of it is closed by less code). On the other side, the reviewer should aim for providing the feedback reasonably quickly and a time frame should clearly be communicated from both sides.
Both parties should keep in mind the broad effects of code reviews, particularly the learning aspects, and act to their best effect. This implies that reviewers are not assigned due to any hierarchy, neither in title nor in (presumed) qualification. Even if the reviewer might know less about the language or project at hand, they can still make valueable points, spark discussions and at the very least learn themselves. In the worst case, there can be a further review afterwards.
Feedback is usually most effective if the reviewer can be provided with a clear set of questions about the code and coder and reviewer are encouraged to clearly communicate about open questions and particular focus during the review.
The Code to be Reviewed # It is in the coder\u0026rsquo;s responsibility that
the reviewer knows how to run and work with the code (this is best done in form of a documentation or README and, if so, this becomes part of the review) has a reasonable size as to not be a burden for the reviewer the code passes all automated tests the code passes all pertinent linters the code is reasonably formatted (with an autoformatting tool if pertinent) the code conforms with all pertinent style guides that any deviation from the above is clearly communicated to the reviewer (with a reseasonable argument at best) How to Review and Provide Feedback # The reviewer can reject the code without any further consideration if the code to be reviewed does not meet the above criteria unless communicated by the coder in advance. Therefore every review should start with running all automated tests, linters, formatters etc.
The review should then consider in order of priority:
Positive aspects of the code No bikeshedding (i.e., no pondering on about small and/or subjective aspects of minor importance like variable names, distribution of code across files, etc. as long as they don\u0026rsquo;t interfere with understanding severely) Functional correctness as far as possible (it might be hard to assess that without a deeper understanding of the project) Structural aspects Readability (this includes severe cases of bad variable names, etc., beyond bikeshedding) Anything else unclear to the reviewer Performance aspects (if necessary and unambiguously assessible) The reviewer should keep in mind the broad effects of code reviews and therefore:
always maintain a positive communication about the code and start with positive aspects provide short explanations for their comments ask about anything unclear even if it is only for their own learning and does not imply any changes to the code `}),e.add({id:3,href:"/RSE-handbook/docs/contributing/getting_started/",title:"Getting Started",section:"Contributing",content:" Getting Started # Install dependencies # Clone the repository # Serve the handbook locally # "}),e.add({id:4,href:"/RSE-handbook/docs/regular_events/",title:"Regular Events",section:"Docs",content:" Regular Events # Standup # Standup Team Meeting # Team Meeting Tech Chat # Tech Chat "}),e.add({id:5,href:"/RSE-handbook/docs/regular_events/standup/",title:"Standup",section:"Regular Events",content:" Standup # Current Process # The team has a daily Standup between 09:45 and 10:00 via Zoom. Each team member summarises the work done yesterday and what to achieve today. If a team member is not available to attend Stantup, he/she can update on ReCoN. If some team members wish to discuss other specific items like technical solutions or coordinating other actions, those who wish to can stay on the Zoom call. Proposed Changes # Add “what could get in the way” to standup topics as previously aimed for? "}),e.add({id:6,href:"/RSE-handbook/docs/regular_events/team_meeting/",title:"Team Meeting",section:"Regular Events",content:` Team Meeting # Current Process # The team has a Weekly, typically Mondays (sometimes shifted due to unavailability or bank holidays), 1 hour allocated, target time 30-45 minutes, conducted via Zoom.
Order of discussion:
Calendar – discuss events for the coming week, some brief mentions of activities in the previous and next week. Typically use screen share of Google calendar. Estimated time: 3-5 minutes.
Projects – updates on the project listing, commenting on status of work items, keep up to date on collaborative projects. Project listings displayed with in-house Azure DevOps Emacs client. Estimated time: 20-30 minutes.
Support – briefly summarize support provided by the team to users. Estimated time: 3-5 minutes.
Efficiency Monitoring – evaluation of user efficiencies on the Sunbird cluster, noting idle node hours and job efficiencies as main indicators. Consider contacting users for support if efficiency drops below 70% with \u0026gt;50 node hours wasted (rough metrics, varies case by case). Prioritise any projects with \u0026lt;40% efficiency to avoid them appearing in Cardiff’s data. Estimated time: 5-7 minutes.
Any Other Business (AOB) - raise miscellaneous items not covered in previous sections. Estimated time: 3-5 minutes.
(Optional) Follow-up meetings – if time remains in the hour allocation and some team members wish to discuss other specific items like technical solutions or coordinating other actions, those who wish to can stay on the Zoom call.
Proposed Changes # `}),e.add({id:7,href:"/RSE-handbook/docs/regular_events/tech_chat/",title:"Tech Chat",section:"Regular Events",content:` Tech Chat # Current Process # Ad-hoc schedule, historically Tuesdays 10-11am, conducted via Zoom
A member of the team will give a presentation discussing a topic pertinent to their research, current projects or technical skills they are interested in.
The most recent tech chat ‘series’ was ‘Getting to know us’, where members of the team gave presentations on their research interests
Currently internal to the team, largely informal
Proposed Changes # Consider resuming wider community tech chats
Find someone to be responsible
Defer for now
`}),e.add({id:8,href:"/RSE-handbook/docs/communications/twitter/",title:"Twitter",section:"Communications",content:` Twitter # The group has a Twitter account @sa2c_swansea. The purpose of the account is to have an informal public-facing channel where we can communicate about projects we are working on, and to promote e.g. job opportunities.
Access # If you want to tweet under the group account, ask the account controller for access.
This also gives you access to Some levels.
What to Post # Projects we work on (if public) Blog posts Talks Conferences and workshops Any public outputs — papers, published code etc. Please refer to the SA2C Social Media Policy when making posts.
`}),e.add({id:9,href:"/RSE-handbook/docs/technical_practices/change_logs/",title:"Changelogs and Semantic Versioning",section:"Common Technical Practices",content:" Changelogs # Semantic Versioning # "}),e.add({id:10,href:"/RSE-handbook/docs/how_we_work/defining_done/",title:"Defining Project Doneness",section:"How We Work",content:" Defining Project Doneness # "}),e.add({id:11,href:"/RSE-handbook/docs/onboarding/",title:"Onboarding",section:"Docs",content:` Onboarding # Current Process # Run through the following checklist:
We use a Zulip instance called ReCoN (Research Computing Network) for communication within the team and with the user community; you will be added to the #SA2C and #SA2C-RSE internal streams, please join any other streams that you are interested in (the cog-shaped icon next to STREAMS on the left lets you do this)
We try to keep an eye out for users asking questions related to topics we are able to support; we don\u0026rsquo;t have very many of these at the moment, but it\u0026rsquo;s something we hope will develop
We are the SA2C organisation on GitHub (https://github.com/sa2c), if you haven’t already been added, please remind Ed to do this.
If we are running training in the next few weeks, what are the topics, where is the material so that new starter can familiarize with it.
Swansea University provides a number of employment benefits—this includes car leasing, tax-advantaged bike purchasing, and discounts on many common retailers. You can access these via https://www.edenred.uk.com/.
We use a shared Google Calendar for keeping track of events that are relevant to multiple team members, and when we will be unavailable (e.g. due to travel or leave).
For central IT-related matters (e.g. managed desktops or problems with centrally-managed services like email and networking) you can contact the Service Desk at https://servicedesk.swansea.ac.uk.
You will want to join the sa2c-users and sa2c-training mailing lists. The information pages at https://mailman.swan.ac.uk/mailman/listinfo/sa2c-users and https://mailman.swan.ac.uk/mailman/listinfo/sa2c-training are available from Eduroam and via the VPN.
The University has multiple Intranets, with a confusing breakdown of what is where:
The Intranet, at https://intranet.swansea.ac.uk, is gradually reducing in importance, but does provide timetables for University-managed rooms, and plans of all University buildings.
The Staff Intranet, at https://staff.swansea.ac.uk, hosts internal information pages. The search box is relatively good (as it needs to be, as the site isn’t indexed by search engines). Most information about policies and procedures can be found here.
The Faculty of Science and Engineering Intranet at https://fse-intranet.swansea.ac.uk, is used by us primarily to manage our annual leave.
You need to be added to this site manually. If you don’t yet have access, remind your line manager to request this. Unit4 ERP (formerly known as Agresso Business World, which some people will still use interchangeably with it), is at https://abw.swansea.ac.uk. The University is gradually consolidating a lot more functionality into this, despite it being barely usable. This is where you:
Check and update your personnel information (some fields are read-only; to update these, contact fse-hr@swansea.ac.uk)
Register for centrally-provided training courses
Find your pay slips and tax paperwork (e.g. P60 forms)
Submit expenses claims
Submit requisitions if you need to make a purchase (e.g. a conference ticket)
Prepare costings for grant submissions and send them for internal approval
We have an internal GitLab instance at https://sa2c-gitlab.swansea.ac.uk. While we primarily use GitHub both for internal and externally-facing projects now, there are a few situations where we want to keep things on-premises.
New users are marked as external by default; you need to be promoted to internal to have fuller access. Speak to Ed to arrange this.
If this is your first RSE post, you will want to start making connections with the wider UK RSE community. The primary place to do this is via the UKRSE Slack at https://ukrse.slack.com. You can join without invitation using your @swansea.ac.uk email address. You may also with to consider joining the Society of Research Software Engineering at https://society-rse.org.
We have a shared OneDrive folder for resources useful to the RSE team (e.g. logos); if you have not already had an invitation to join this, speak to Ed to remind them.
Room availability for FSE-managed rooms can be checked via SharePoint at https://swanseauniversity.sharepoint.com/schools/science/rooms/. These can be booked via an email to fse-reception@swansea.ac.uk.
Networking:
If you need to connect a machine to the wired network, you need to provide the MAC address to the Service Desk.
Swansea University uses Eduroam for its wireless connectivity. You can join the SwanseaUni-Setup network to access the registration page, and download tools to set up your device. Once you have Eduroam set up, you should be able to use it at any university that uses the service (the “roam” in “Eduroam”), without needing to change any details.
If you need to print, there are printers in the post rooms on the third and fourth floors of the Computational Foundry. They use a cloud-based printing service so there is only one printer to install, which is visible from Eduroam and the wired network.
If you need to travel for work reasons, things to be aware of:
Train travel within the UK, and flights and hotels anywhere, must be booked through the Travel Planet system, unless there is a good reason not to (such as using a conference-provided hotel not available via Travel Planet)
International travel must be approved in advance. This process takes a week or two; please start the paperwork moving as soon as you know when you’ll be travelling. (There is also an online training course.)
Other costs (e.g. conference fees, poster printing) should be paid via the requisition system on ABW. Someone who has done this before can walk you through this process.
Expenses incurred while travelling can (and should!) be reclaimed, but you do need receipts (specifically itemized/till receipts, not just credit/debit card receipts). (An exception is driving your own car, which is done on the basis of mileage rather than receipted expense.) This process is limited to things like meals and local travel that could not be bought in advance via the requisition system.
More detail on all of these can be found on the Staff Intranet. There are two relevant policies: the Business Travel Policy and the Expenses Policy. Please get familiar with both of them before you travel.
Proposed Changes # Would be good to split out a checklist for team leaders (accounts and permissions) that can be done asynchronously from the induction meeting, and turn some of the information here into a document that can be read (possibly with check-boxes for “yep, got that”), rather than it being a long talk that mostly goes over the new starter’s head.
Unfortunately we can’t avoid needing to go through HR’s induction spiel, which is potentially more boring than the one above.
`}),e.add({id:12,href:"/RSE-handbook/docs/projects/record/",title:"Record",section:"Projects",content:` Record # Current Process # Record is a private GitHub repository where we keep track of things that we have done at a higher level of detail but a lower level of granularity than is done in Azure DevOps. It is at https://github.com/sa2c/record. Members of SA2C should automatically have access.
For optimisation projects, we keep track of benchmarking data here so we can compare before and after. Where possible we also keep any notes on what was done, to make it easier to pick up work again later. (This is an area for improvement; we have not been rigorous about this.) Each project gets a subdirectory.
Where possible we keep raw data. Having a PNG file of a plot is far less useful when we want to do something with data in 18 months’ time than having all of the output files that were scraped to generate the plot. For reports, we keep the LaTeX source so that the report can be updated later. For one-to-one ad-hoc support, we have the support subdirectory. Each person we have support interactions with gets a Markdown file named after the person’s surname. The file has brief details about the person (name, department, what kind of research they do, how they first encountered us, things that are useful to know that give context to the support), followed by one or more subheadings of times they have got in touch with support, what they asked, and how we answered.
If we have e.g. written a job script, then a copy of this can be included in a code block.
If larger amounts of code are worked with, or other files are generated, then a subdirectory within the support subdirectory is created with the person’s surname as its name, and the markdown and any other files are placed into this subdirectory instead.
When users are identified as having low efficiency on SUNBIRD, then a line is added to the table under efficiency_monitoring/README.md. Data to include immediately are the date this was identified, the user’s name and their username, the efficiency and number of idle node-hours (with the number that was concerning marked in bold), and the name of the RSE responsible for investigating and following up on this. Where a guess at the cause can be made from the output of sacct, then this can be listed as the cause. The action will initially be to contact the user, or to monitor and contact if the problem recurs. Once the user has responded to contact and worked through the issue, then the cause and action can be updated.
There are some tools for working with the output of sacct in a submodule within this directory. Other useful files in the root of the repository:
A list of projects that have been requested but did not at the time have available capacity, in pending_projects.md.
A list of metrics that we want to consider investigating when preparing performance reports on an application are in performance-report-metrics.md.
The shared configuration for the Emacs Azure DevOps client is stored as azdev_config.el. Emacs users should add source this from their personal Emacs initialisation to set up the correct current project list.
Proposed Changes # `}),e.add({id:13,href:"/RSE-handbook/docs/contributing/style_guide/",title:"Style Guide",section:"Contributing",content:" Style Guide # Semantic Line Breaks # Markdown # "}),e.add({id:14,href:"/RSE-handbook/docs/contributing/creating_a_page/",title:"Adding New Content",section:"Contributing",content:" Adding New Content # How Hugo Arranges Content # Creating a New Page # "}),e.add({id:15,href:"/RSE-handbook/docs/how_we_work/",title:"How We Work",section:"Docs",content:" How We Work # "}),e.add({id:16,href:"/RSE-handbook/docs/how_we_work/knowledge_sharing/",title:"Knowledge Sharing",section:"How We Work",content:" Knowledge Sharing # Daily # ReCoN # Slack # Weekly # RSE Team Meetings # Tech Chat # Approximately Monthly # SA2C Events # RSE Newsletter # SA2C Mailing List # Less frequently or ad-hoc # Code Review # SA2C courses and training # Remote Co-working # Hack Sessions \u0026amp; RSE Collaborative Time # Working on Other Projects # "}),e.add({id:17,href:"/RSE-handbook/docs/technical_practices/python/",title:"Python Tools and Practices",section:"Common Technical Practices",content:" Python Tools and Practices # Autoformatters / Linters # Type Checkers # Automation (Pre-Commit \u0026amp; Actions) # Testing tools # "}),e.add({id:18,href:"/RSE-handbook/docs/technical_practices/configuring_editors/",title:"Configuring Your Editor",section:"Common Technical Practices",content:" Configuring Your Editor # General # VS code # Extensions # Settings # Selecting the Python Interpreter # Linting # Formatting # Running Tests # Debugging # Other Tips and Tricks # "}),e.add({id:19,href:"/RSE-handbook/docs/contributing/editing_a_page/",title:"Editing a Page",section:"Contributing",content:" Editing a Page # Pages # Front Matter # Content # Shortcodes # Repository Shortcodes # repo_link # "}),e.add({id:20,href:"/RSE-handbook/docs/how_we_work/meeting_record/",title:"Meeting Records",section:"How We Work",content:" Meeting Records # "}),e.add({id:21,href:"/RSE-handbook/docs/projects/",title:"Projects",section:"Docs",content:` Projects # This section describes how we coordinate our project work.
It does not go into details of how individual projects are managed, but how RSE coordinates its commitments to the range of projects it\u0026rsquo;s involved in.
Azure DevOps # Azure DevOps Record # Record `}),e.add({id:22,href:"/RSE-handbook/docs/technical_practices/",title:"Common Technical Practices",section:"Docs",content:" Common Technical Practices # "}),e.add({id:23,href:"/RSE-handbook/docs/contributing/contributing_changes/",title:"Contributing Changes",section:"Contributing",content:" Contributing Changes # Creating a Branch # Opening a Pull Request # Continuous Integration # Keeping Your Branch up to Date # Merging # Rebasing # The Review Process # "}),e.add({id:24,href:"/RSE-handbook/docs/contributing/reviewing_changes/",title:"Reviewing Changes",section:"Contributing",content:" Reviewing Changes # Code Quality # Reviewing the Pull Request # Changes # Merging # "}),e.add({id:25,href:"/RSE-handbook/docs/training/",title:"Training",section:"Docs",content:` Training # Current Process # We organise training on various aspects of research software. We do this because we want users to be more skilled so they are able to better take advantage of the available facilities, to reduce the amount of one on one support needed (and shift it to being at a higher level), and ultimately to try and empower researchers to do more and better research. It also provides a good opportunity to grow our network, so more people are aware of who we are and what we do (outside of delivering training).
Teaching people to use or write software is a different skill from using it or writing it ourselves, so we need to be trained to do this. We use The Carpentries Instructor Training for this purpose.
We deliver material from The Carpentries, including Software Carpentry and Data Carpentry, as well as material we have developed ourselves in the same style.
Training workshops are a mix of online and in-person. Online workshops are done via Zoom, and are 3.5 hours per day, either 9:30–13:00 or 13:00–16:30. In-person workshops are for full days 9:00–17:00 with 1 hour for lunch. A 2-day in-person event becomes a 5-half-day online workshop; others remain the same number of half days.
Workshops are advertised to the sa2c-training mailing list, as well as via the postgraduate research office.
Signup is via Tocyn Cymru, a ticketing service vaguely similar to (but much less intrusive than) Eventbrite.
Login details for this are available from Ed Timeline of a workshop:
At least 48 hours before the start of the workshop, registrations close and a pre-workshop email is sent to those who have registered. This contains details of the programme, links to join the Zoom call if it is online, a pre-workshop survey, a link to the code of conduct, and instructions on how to set up their computer ready for the event.
Around 24 hours before the start of the workshop, there is a setup help drop-in session to allow anyone having difficulty with the setup instructions to get help before the workshop starts rather than disrupting the event. Typically nobody attends these.
For in-person events, the list of registered participants needs to be turned into a register for signing (to justify the catering).
At the start of the workshop, we run through some housekeeping:
Welcome
Who are we, and why are we here? (Introduce the RSE team, SA2C, why we choose to deliver training)
What are we doing?/What is Software Carpentry? (Explain the topics that will be covered, and if this is a Carpentries workshop then explain our relationship with The Carpentries and how the material is collaboratively developed.)
Code of conduct (Remind people of the basics, and highlight things that might not be familiar, such as making fun of people’s technical choices)
If the workshop is on Zoom, then some Zoom-specific aspects:
Cameras aren’t compulsory, but having at least a few switched on makes it much easier to teach
We use reaction buttons to gauge the pace (in place of sticky notes for in-person events), and check at this point that everyone can click “Yes”
For some events we use breakout rooms for smaller discussions, or to provide one-on-one support with someone without disrupting the main room. If this is the plan then we will test here that everyone is able to avoid joining breakout rooms until they need to, then that they can join, and can leave again.
Explanation of how live coding works. This is not normally sufficient—need to remind people regularly that they should be following along and letting us know if they are falling behind.
Mention that they can follow the material as well, as everything we say will be following that closely.
For online workshops, point out that having multiple screens can be useful (e.g. have the notes on a phone or tablet so it doesn’t compete with Zoom and the development environment)
Suggest setting an out-of-office for the duration of the workshop to avoid distractions
Etherpad – share a link to it so that people can make collaborative notes, share links, etc.
Circulate the register at this point—for online events this is a link provided by the PGR office Rough schedule and when to expect breaks
Hand over to instructor
At the end of the workshop we have some more housekeeping
Feedback survey for the PGR office. Link to post-workshop survey for Carpentries events.
Mention keeping in touch via ReCoN
Invite to join training mailing list (and main mailing list if workshop if HPC specific)
Mention ways of working with RSEs in future beyond training (e.g. write us into grant applications)
Registrations from Tocyn are recorded in an Excel spreadsheet stored in Teams/OneDrive/Sharepoint
Additional information is added by hand from searching University records: the status of each learner (student/postdoc/academic) and their college (colleges no longer exist, as they merged to form Faculties, but keeping this division is useful in terms of avoiding having to destroy old data and keeping some structure within the monolithic faculties)
A PivotTable generates summary statistics
Proposed Changes # `}),e.add({id:26,href:"/RSE-handbook/docs/contributing/advanced/",title:"Advanced",section:"Contributing",content:" Advanced # Using Data # Creating Shortcodes # Partial Templates # "}),e.add({id:27,href:"/RSE-handbook/docs/support/",title:"Support",section:"Docs",content:` Support # Current Process # ReCoN
The RSE team can provide solutions via public stream.
Each team member can provide support to users via PM for individual projects.
RSEs can provide specific support based on their skills.
Email
SA2C can provide technical support via sa2c-support@swansea.ac.uk. Meetings
SA2C can provide technical support via scheduled in-person or online meetings. Proposed Changes # `}),e.add({id:28,href:"/RSE-handbook/docs/communications/",title:"Communications",section:"Docs",content:` Communications # ReCoN # The group has a Zulip platform, Research Computing Network, for Swansea University staff and students to communicate with SA2C. It is also the daily communication platform for members of SA2C.
Twitter # Twitter Email # The group has a dedicated email address (sa2c-support@swansea.ac.uk), currently managed by the technical team.
Proposed Changes # Include ReCoN in outgoing emails. (Discussed before)
Regular update on Twitter. (Who is managing this Twitter account?)
Include SA2C’s Twitter account in outgoing emails.
Do we have a social media policy?
Make it a group Twitter account?
What to post? For example, projects, talks, training workshops, conferences, public outputs (papers, published code etc.)?
`}),e.add({id:29,href:"/RSE-handbook/docs/contributing/",title:"Contributing",section:"Docs",content:` Contributing # This section contains a guide for contributing to the SA2C RSE Handbook. It is not a comprehensive guide to Hugo or any of the other tools used. Instead it is aimed to be a user-focused guide explaining how add to or edit the handbook without dwelling on the details of the underlying technologies. For those interesting in learning more, links will be liberally placed throughout for further reading.
`})})()