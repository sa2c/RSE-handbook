<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on RSE Handbook</title><link>https://sa2c.github.io/RSE-handbook/</link><description>Recent content in Introduction on RSE Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://sa2c.github.io/RSE-handbook/index.xml" rel="self" type="application/rss+xml"/><item><title>Discussions and Issues</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/discussions_and_issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/discussions_and_issues/</guid><description> Discussions and Issues # Discussions # Issues #</description></item><item><title>Azure DevOps</title><link>https://sa2c.github.io/RSE-handbook/docs/projects/azure_devops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/projects/azure_devops/</guid><description>Azure DevOps # Current Process # We use the boards/work items functionality of Azure DevOps to track tasks and progress on projects. These are structured in a relatively prescriptive way
Each project is created as a “team” and “area path” in Azure DevOps language.
Overarching areas of work within projects are created as Epics. Many/most projects have a single Epic.
Goals within an area are created as Features. Features must be parented to Epics.</description></item><item><title>Code Review</title><link>https://sa2c.github.io/RSE-handbook/docs/how_we_work/code_review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/how_we_work/code_review/</guid><description>Code Review # Code reviews are used by most sucessful tech companies and generally propagated as a useful tool for several reasons:
Better code quality Learning effects for the coder and the reviewer Increasing the lottery factor There are numerous discussions and opinions of good code reviews out there in every imaginable way of presentation (see &amp;hellip;) but as code reviews are practically non-existent in our group at the time of writing, this document shall only provide some very simple guidelines that can be expanded on when the basics are established.</description></item><item><title>Getting Started</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/getting_started/</guid><description> Getting Started # Install dependencies # Clone the repository # Serve the handbook locally #</description></item><item><title>Standup</title><link>https://sa2c.github.io/RSE-handbook/docs/regular_events/standup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/regular_events/standup/</guid><description>Standup # The RSE team has a daily Standup between 09:45 and 10:00 via Zoom. Topic What has been achieved in the last day What will be achieved in the next day What could get in the way If a team member is not available to attend Stantup, it can be updated on ReCoN. (Optional) If some team members wish to discuss other specific items like technical solutions or coordinating other actions, those who wish to can stay on the Zoom call.</description></item><item><title>Team Meeting</title><link>https://sa2c.github.io/RSE-handbook/docs/regular_events/team_meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/regular_events/team_meeting/</guid><description>Team Meeting # Current Process # The team has a Weekly, typically Mondays (sometimes shifted due to unavailability or bank holidays), 1 hour allocated, target time 30-45 minutes, conducted via Zoom.
Order of discussion:
Calendar – discuss events for the coming week, some brief mentions of activities in the previous and next week. Typically use screen share of Google calendar. Estimated time: 3-5 minutes.
Projects – updates on the project listing, commenting on status of work items, keep up to date on collaborative projects.</description></item><item><title>Tech Chat</title><link>https://sa2c.github.io/RSE-handbook/docs/regular_events/tech_chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/regular_events/tech_chat/</guid><description>Tech Chat # Current Process # Ad-hoc schedule, historically Tuesdays 10-11am, conducted via Zoom
A member of the team will give a presentation discussing a topic pertinent to their research, current projects or technical skills they are interested in.
The most recent tech chat ‘series’ was ‘Getting to know us’, where members of the team gave presentations on their research interests
Currently internal to the team, largely informal
Proposed Changes # Consider resuming wider community tech chats</description></item><item><title>Twitter</title><link>https://sa2c.github.io/RSE-handbook/docs/communications/twitter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/communications/twitter/</guid><description>Twitter # The group has a Twitter account @sa2c_swansea. The purpose of the account is to have an informal public-facing channel where we can communicate about projects we are working on, and to promote e.g. job opportunities.
Access # If you want to tweet under the group account, ask the account controller for access.
This also gives you access to Some levels.
What to Post # Projects we work on (if public) Blog posts Talks Conferences and workshops Any public outputs, papers, published code, etc.</description></item><item><title>Changelogs and Semantic Versioning</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/change_logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/change_logs/</guid><description>Changelogs # For any non-trivial code, it is worth maintaining a Changelog. This is valuable as it is a record of changes from the perspective of users (rather than git commit messages which are often only meaningful to the developers involved). A recommended format for Changelog files is given at Keep a changelog. All notable changes to a project should be documented in this file.
Semantic Versioning # A related concept is semantic versioning.</description></item><item><title>Defining Project Doneness</title><link>https://sa2c.github.io/RSE-handbook/docs/how_we_work/defining_done/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/how_we_work/defining_done/</guid><description>Defining Project Doneness # As a Research Software Engineer, we often join a collaborative project when a code base already exists. Defining the aims of a collaboration can be challenging, and when there is limited time it is important to apply attention in the right places.
Current status # To the best of my knowledge, we don&amp;rsquo;t currently have a standardised procedure to measure project aims and &amp;ldquo;doneness&amp;rdquo;.
Proposed changes # The following document is directly taken over from the REG Handbook by the Alan Turing Institute.</description></item><item><title>Record</title><link>https://sa2c.github.io/RSE-handbook/docs/projects/record/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/projects/record/</guid><description>Record # Current Process # Record is a private GitHub repository where we keep track of things that we have done at a higher level of detail but a lower level of granularity than is done in Azure DevOps. It is at https://github.com/sa2c/record. Members of SA2C should automatically have access.
For optimisation projects, we keep track of benchmarking data here so we can compare before and after. Where possible we also keep any notes on what was done, to make it easier to pick up work again later.</description></item><item><title>Style Guide</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/style_guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/style_guide/</guid><description> Style Guide # Semantic Line Breaks # Markdown #</description></item><item><title>Adding New Content</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/creating_a_page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/creating_a_page/</guid><description> Adding New Content # How Hugo Arranges Content # Creating a New Page #</description></item><item><title>Configuring Your Editor</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/configuring_editors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/configuring_editors/</guid><description>Configuring Your Editor # There is such a thing as EditorConfig that we could start to adapt. We currently don&amp;rsquo;t use it.</description></item><item><title>Knowledge Sharing</title><link>https://sa2c.github.io/RSE-handbook/docs/how_we_work/knowledge_sharing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/how_we_work/knowledge_sharing/</guid><description>Knowledge Sharing # This page lists the tools, resources and activities that this team has to promote general communication as well as sharing and gaining knowledge across the team and the university as a whole, and some thoughts on what we could try to improve this. If you’re looking to learn something new, get help with a problem, share something cool you’ve been doing, or find out what others in the team are doing, the list below may give an idea of where to look/what to try.</description></item><item><title>C++ Tools and Practices</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/cpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/cpp/</guid><description> C++ Tools and Practices # If none of the excluding reasons from the general Tools and Best Practices applies, do the following:
Autoformat your code with clang-format Lint your code with clang-tidy Try to digest and apply C++ Core Guidelines to the best of your abilities In case you start from scratch, use ModernCppStarter. Otherwise, use it as a guideline as to how your code could look like.</description></item><item><title>Editing a Page</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/editing_a_page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/editing_a_page/</guid><description> Editing a Page # Pages # Front Matter # Content # Shortcodes # Repository Shortcodes # repo_link #</description></item><item><title>Meeting Records</title><link>https://sa2c.github.io/RSE-handbook/docs/how_we_work/meeting_record/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/how_we_work/meeting_record/</guid><description>Meeting Records # Current process # There is currently no standardised method of taking and curating meeting records. For collaborative notes, we sometimes use shared MS Word documents and for asynchronous sharing git(hub/lab) repositories.
Proposed changes # We could introduce a more standardised method and the REG Handbook proposes one way to do so. However, we should probably be careful which meetings could benefit from this precisely because for our very small team meetings are usually only one or two people who can probably coordinate better between themselves.</description></item><item><title>Contributing Changes</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/contributing_changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/contributing_changes/</guid><description> Contributing Changes # Creating a Branch # Opening a Pull Request # Continuous Integration # Keeping Your Branch up to Date # Merging # Rebasing # The Review Process #</description></item><item><title>Python Tools and Practices</title><link>https://sa2c.github.io/RSE-handbook/docs/technical_practices/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/technical_practices/python/</guid><description>Python Tools and Practices # If none of the excluding reasons from the general Tools and Best Practices applies, do the following:
Autoformat your code with black Sort your inputs with isort Use type hints and mypy as a static type checker Lint your code with flake8 and pylint (they have some overlap but they are not identical) Use pytest for automated testing We might at some point provide more details on how to do that here.</description></item><item><title>Reviewing Changes</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/reviewing_changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/reviewing_changes/</guid><description> Reviewing Changes # Code Quality # Reviewing the Pull Request # Changes # Merging #</description></item><item><title>Advanced</title><link>https://sa2c.github.io/RSE-handbook/docs/contributing/advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/contributing/advanced/</guid><description> Advanced # Using Data # Creating Shortcodes # Partial Templates #</description></item><item><title/><link>https://sa2c.github.io/RSE-handbook/docs/onboarding/travel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/onboarding/travel/</guid><description>Travel # If you need to travel for work reasons, there are many things to be aware of. All details can be found on the Staff Intranet. Specific documents to look at include:
the Business Travel Policy and Procedure, the Expenses Policy and Procedure. You should read these in more detail before travelling. A summary of some non-obvious things to bear in mind:
International travel # International travel must be approved in advance.</description></item><item><title/><link>https://sa2c.github.io/RSE-handbook/docs/training/housekeeping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/training/housekeeping/</guid><description>Housekeeping # We have a number of points to discuss at the start and end of a workshop.
Starting a workshop # Welcome Who are we, and why are we here? (Introduce the RSE team, SA2C, why we choose to deliver training.) What are we doing? What is Software Carpentry? (Explain the topics that will be covered, and if this is a Carpentries workshop then explain our relationship with The Carpentries and how the material is collaboratively developed.</description></item><item><title/><link>https://sa2c.github.io/RSE-handbook/docs/training/timeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sa2c.github.io/RSE-handbook/docs/training/timeline/</guid><description>Timeline of training # The following steps are needed for a workshop.
Months before a workshop # What workshops will be delivered in a semester are decided, as well as which will be in-person/online. These are communicated to the Postgraduate Office, who arrange for room bookings and registration pages. The workshop landing pages are created based on The Carpentries template. When registration pages are available, details are circulated to mailing lists.</description></item></channel></rss>